/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include "lily58.h"

#define ARROWS LM2 LB3 LB2 LB1

/ {
    behaviors {
        kt_on: key_toggle_on_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle On";
            toggle-mode = "on";
        };
        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle off";
            toggle-mode = "off";
        };
        mv_win: mv_win {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&none>, <&kt LGUI>;
            ignored-key-positions = <ARROWS>; // ignore arrows
        };
        ctrl_h: ctrl_h {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&none>, <&kt LCTRL>, <&kt_off LCTRL>;
            ignored-key-positions = <ARROWS 36>; // ignore arrows
        };
        shift_h: shift_h {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&none>, <&kt LSHFT>, <&kt_off LSHFT>;
            ignored-key-positions = <ARROWS 24>; // ignore arrows
        };
        // shift on hold, tap for caps word
        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <LF5 ARROWS>; // ignore left shift and arrows
        };
        caps: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;
            display-name = "Mod-Tap";
        };
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
     combos {
        compatible = "zmk,combos";
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp LBRC>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RBRC>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RPAR>;
        };
        combo_lsq {
            timeout-ms = <50>;
            key-positions = <45 46>;
            bindings = <&kp LBKT>;
        };
        combo_rsq {
            timeout-ms = <50>;
            key-positions = <46 47>;
            bindings = <&kp RBKT>;
        };
        combo_langle {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp LT>;
        };
        combo_rangle {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp GT>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | GUI  | ALT  | LOWER|  SPACE1|  | ENTER | RAISE| BSPC  | GUI   |
            bindings = <
&kp ESC   &kp N1        &kp N2            &kp N3        &kp N4       &kp N5                              &kp N6 &kp N7        &kp N8        &kp N9           &kp N0         &kp GRAVE
&kp TAB   &kp Q         &kp W             &kp E         &kp R        &kp T                               &kp Y  &kp U         &kp I         &kp O            &kp P          &kp MINUS
&kp LCTRL &hml LGUI A   &hml LEFT_ALT S   &hml LSHFT D  &hml LCTRL F &kp G                               &kp H  &hmr LCTRL J  &hmr LSHFT K  &hmr LEFT_ALT L  &hmr LGUI SEMI &kp SQT
&caps LSHFT 0 &kp Z         &kp X             &kp C         &kp V        &kp B        &kp LBKT      &kp RBKT &kp N  &kp M         &kp COMMA     &kp DOT          &kp FSLH       &kp RSHFT
                                          &kp LGUI      &kp LALT     &lt 1 BSPC   &lt 3 SPACE   &kp RET  &lt 2 BSPC  &kp RALT      &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3 &bt BT_SEL 4                 &trans    &trans    &trans    &trans    &trans    &trans
&kp F1      &kp F2           &kp F3            &kp F4            &kp F5       &kp F6                       &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL         &kp AT            &kp HASH          &kp DOLLAR   &kp PRCNT                    &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR  &kp TILDE
&trans      &kp LC(Z)        &kp LC(X)         &kp LC(C)         &kp LC(V)    &kp LC(Z) &trans   &trans    &trans    &kp MINUS &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
                                               &trans            &trans       &trans    &trans   &kp LC(Z) &kp LC(C) &kp LC(V) &kp LC(X)
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
&kp GRAVE &kp N1 &kp N2 &kp N3  &kp N4  &kp N5                       &kp N6      &kp N7    &kp N8    &kp N9   &kp N0    &trans
&kp F1    &kp F2 &kp F3 &kp F4  &kp F5  &kp F6                       &trans      &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT &trans
&kp F7    &kp F8 &kp F9 &kp F10 &kp F11 &kp F12   &trans   &trans    &kp KP_PLUS &kp MINUS &kp EQUAL &kp LBKT &kp RBKT  &kp BSLH
                        &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
        nav_layer {
            bindings = <
&bootloader      &trans    &trans    &trans    &trans       &trans                            &trans      &trans    &trans    &trans   &trans    &trans
&swap            &kp PG_UP &kp HOME  &kp UP    &kp END      &kp RET                           &kp N7  &kp N8  &kp N9          &trans   &trans    &trans
&ctrl_h          &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT    &kp BSPC                          &kp N4  &kp N5  &kp N6          &trans   &trans    &trans
&shift_h         &trans    &kp BSPC  &trans    &trans       &kp DEL   &trans          &trans  &kp N1  &kp N2  &kp N3          &trans   &trans    &trans
                                            &trans  &trans  &mv_win   &trans          &trans  &trans  &kp N0  &kp DOT      
>;
        };
    };
};

// &trans    &trans &trans &trans  &trans  &trans                         &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans                         &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans                         &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans  &trans         &trans  &trans      &trans    &trans    &trans   &trans    &trans
//                         &trans  &trans  &trans  &trans         &trans  &trans      &trans    &trans 
